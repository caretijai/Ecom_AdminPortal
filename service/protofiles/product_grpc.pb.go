// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protofiles

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// ProductCatalogueServiceClient is the client API for ProductCatalogueService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProductCatalogueServiceClient interface {
	GetAllCategories(ctx context.Context, in *GetAllCategoriesRequest, opts ...grpc.CallOption) (*GetAllCategoriesResponse, error)
}

type productCatalogueServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProductCatalogueServiceClient(cc grpc.ClientConnInterface) ProductCatalogueServiceClient {
	return &productCatalogueServiceClient{cc}
}

func (c *productCatalogueServiceClient) GetAllCategories(ctx context.Context, in *GetAllCategoriesRequest, opts ...grpc.CallOption) (*GetAllCategoriesResponse, error) {
	out := new(GetAllCategoriesResponse)
	err := c.cc.Invoke(ctx, "/protofiles.ProductCatalogueService/GetAllCategories", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductCatalogueServiceServer is the server API for ProductCatalogueService service.
// All implementations must embed UnimplementedProductCatalogueServiceServer
// for forward compatibility
type ProductCatalogueServiceServer interface {
	GetAllCategories(context.Context, *GetAllCategoriesRequest) (*GetAllCategoriesResponse, error)
	mustEmbedUnimplementedProductCatalogueServiceServer()
}

// UnimplementedProductCatalogueServiceServer must be embedded to have forward compatible implementations.
type UnimplementedProductCatalogueServiceServer struct {
}

func (UnimplementedProductCatalogueServiceServer) GetAllCategories(context.Context, *GetAllCategoriesRequest) (*GetAllCategoriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllCategories not implemented")
}
func (UnimplementedProductCatalogueServiceServer) mustEmbedUnimplementedProductCatalogueServiceServer() {
}

// UnsafeProductCatalogueServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductCatalogueServiceServer will
// result in compilation errors.
type UnsafeProductCatalogueServiceServer interface {
	mustEmbedUnimplementedProductCatalogueServiceServer()
}

func RegisterProductCatalogueServiceServer(s *grpc.Server, srv ProductCatalogueServiceServer) {
	s.RegisterService(&_ProductCatalogueService_serviceDesc, srv)
}

func _ProductCatalogueService_GetAllCategories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllCategoriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductCatalogueServiceServer).GetAllCategories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protofiles.ProductCatalogueService/GetAllCategories",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductCatalogueServiceServer).GetAllCategories(ctx, req.(*GetAllCategoriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ProductCatalogueService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protofiles.ProductCatalogueService",
	HandlerType: (*ProductCatalogueServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAllCategories",
			Handler:    _ProductCatalogueService_GetAllCategories_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "product.proto",
}
